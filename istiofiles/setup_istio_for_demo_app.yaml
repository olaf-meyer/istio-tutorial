apiVersion: v1
kind: Template
metadata:
  name: config-for-demo-app
parameters:
- name: DEPLOYMENT_NAMESPACE
  description: "Namespace to which the application will be deployed"
  required: true
- name: CONTROLPLANE_NAMESPACE
  description: "Namespace of the istio control plane"
  required: true
- name: CLUSTER_DOMAIN
  description: "Domain of the OpenShift cluster"
  required: true
- name: KAFKA_NAMESPACE
  description: "Namespace to which the kafka broker has be deployed"
  required: true
objects:
- apiVersion: networking.istio.io/v1alpha3
  kind: Gateway
  metadata:
    name: customer-gateway
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    selector:
      istio: ingressgateway # use istio default controller
    servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
      - "customer-${DEPLOYMENT_NAMESPACE}.${CLUSTER_DOMAIN}"
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: customer-gateway-vs
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    hosts:
    - "customer-${DEPLOYMENT_NAMESPACE}.${CLUSTER_DOMAIN}"
    gateways:
    - customer-gateway
    http:
    - match:
      - uri:
          prefix: /customer
      rewrite:
        uri: /
      route:
      - destination:
          host: customer
          port:
            number: 8080
### Istio inter server routing
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: customer
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    hosts:
    - customer
    http:
    - route:
      - destination:
          host: customer
          subset: version-v1
        weight: 100
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: preference
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    hosts:
    - preference
    http:
    - route:
      - destination:
          host: preference
          subset: version-v1
        weight: 100
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: recommendation
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    hosts:
    - recommendation
    http:
    - route:
      - destination:
          host: recommendation
          subset: version-v1
        weight: 40
      - destination:
          host: recommendation
          subset: version-v2
        weight: 40
      - destination:
          host: recommendation
          subset: version-v3
        weight: 20
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: demo-app-log-cluster-kafka-brokers
    namespace: ${KAFKA_NAMESPACE}
  spec:
    hosts:
      - demo-app-log-cluster-kafka-brokers.kafka.svc.cluster.local
    tcp:
    - match:
      - port: 9091
      - port: 9092
      - port: 9093
      route:
      - destination:
          host: demo-app-log-cluster-kafka-brokers.kafka.svc.cluster.local
          subset: 'version-v1'
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: demo-app-log-cluster-kafka-bootstrap
    namespace: ${KAFKA_NAMESPACE}
  spec:
    hosts:
      - demo-app-log-cluster-kafka-bootstrap.kafka.svc.cluster.local
    tcp:
    - match:
      - port: 9091
      - port: 9092
      - port: 9093
      route:
      - destination:
          host: demo-app-log-cluster-kafka-bootstrap.kafka.svc.cluster.local
          subset: 'version-v1'
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: customer
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    host: customer
    subsets:
      - name: version-v1
        labels:
          version: v1
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: preference
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    host: preference
    subsets:
      - name: version-v1
        labels:
          version: v1
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: recommendation
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    host: recommendation
    subsets:
      - name: version-v1
        labels:
          version: v1
      - name: version-v2
        labels:
          version: v2
      - name: version-v3
        labels:
          version: v3
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: demo-app-log-cluster-kafka-brokers
    namespace: ${KAFKA_NAMESPACE}
  spec:
    host: demo-app-log-cluster-kafka-brokers.kafka.svc.cluster.local
    subsets:
      - labels:
          version: '1'
        name: 'version-v1'
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: demo-app-log-cluster-kafka-bootstrap
    namespace: ${KAFKA_NAMESPACE}
  spec:
    host: demo-app-log-cluster-kafka-bootstrap.kafka.svc.cluster.local
    subsets:
      - labels:
          version: '1'
        name: 'version-v1'
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
- apiVersion: networking.istio.io/v1alpha3
  kind: ServiceEntry
  metadata:
    name: worldclockapi-egress-rule
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    hosts:
    - worldclockapi.com
    ports:
    - name: http-80
      number: 80
      protocol: http
### Istio RBAC service config unsing authorization policy instead of ServiceBinding for all services includes gateway
- apiVersion: "security.istio.io/v1beta1"
  kind: "AuthorizationPolicy"
  metadata:
    name: "ingress"
    namespace: ${CONTROLPLANE_NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: istio-ingressgateway
    rules:
    - to:
      - operation:
          methods: ["GET"]
- apiVersion: "security.istio.io/v1beta1"
  kind: "AuthorizationPolicy"
  metadata:
    name: "ingress-customer"
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: customer
    rules:
      # - when:
      #     - key: 'request.auth.claims[roles]'
      #       values:
      #         - customer
      - to:
          - operation:
              methods:
                - GET
- apiVersion: "security.istio.io/v1beta1"
  kind: "AuthorizationPolicy"
  metadata:
    name: "preference"
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: preference
    rules:
    - from:
      - source:
          principals: ["cluster.local/ns/${DEPLOYMENT_NAMESPACE}/sa/customer"]
      to:
      - operation:
          methods: ["GET"]
- apiVersion: "security.istio.io/v1beta1"
  kind: "AuthorizationPolicy"
  metadata:
    name: "recommendation"
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: recommendation
    rules:
    - from:
      - source:
          principals: ["cluster.local/ns/${DEPLOYMENT_NAMESPACE}/sa/preference"]
      to:
      - operation:
          methods: ["GET"]
- apiVersion: security.istio.io/v1beta1
  kind: AuthorizationPolicy
  metadata:
    name: kafka-broker
    namespace: ${KAFKA_NAMESPACE}
  spec:
    rules:
    - from:
      - source:
          principals:
          - cluster.local/ns/demo-app/sa/consumer
          - cluster.local/ns/demo-app/sa/customer
          - cluster.local/ns/demo-app/sa/preference
          - cluster.local/ns/demo-app/sa/recommendation
    selector:
      matchLabels:
        app: kafka-cluster-demo-app-log
- apiVersion: security.istio.io/v1beta1
  kind: AuthorizationPolicy
  metadata:
    name: kafka-internal
    namespace: ${KAFKA_NAMESPACE}
  spec:
    rules:
    - {}
- apiVersion: "security.istio.io/v1beta1"
  kind: "AuthorizationPolicy"
  metadata:
    name: "scrape-metrics"
    namespace: ${DEPLOYMENT_NAMESPACE}
  spec:
    rules:
    - from:
      - source:
          namespaces: ["${CONTROLPLANE_NAMESPACE}"]
        to:
        - operation:
            methods: ["GET"]
            paths: [/metrics]
# - kind: PeerAuthentication
#   apiVersion: security.istio.io/v1beta1
#   metadata:
#     name: demo-app
#     namespace: ${DEPLOYMENT_NAMESPACE}
#   spec:
#     mtls:
#       mode: STRICT
# - kind: PeerAuthentication
#   apiVersion: security.istio.io/v1beta1
#   metadata:
#     name: kafka
#     namespace: ${KAFKA_NAMESPACE}
#   spec:
#     mtls:
#       mode: STRICT